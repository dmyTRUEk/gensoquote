# generate rust quotes file

from dataclasses import dataclass

from generate_lib import *

def main():
	with open("./data/quotes.txt", 'r') as file_input:
		file_input_lines = file_input.readlines()

	lines = list(map(str.strip, file_input_lines))
	output = []

	output.append(f"//! ALL Touhou quotes.")
	output.append("")
	output.append("// DO NOT EDIT THIS FILE BY HANDS!")
	output.append("// INSTEAD EDIT CORRESPONDING FILE!")
	output.append("")
	output.append("use crate::{")
	# output.append("\tartbooks::Artbook::*,")
	output.append("\tcharacters::Character::*,")
	# output.append("\tgames::Game::*,")
	output.append("\tquote::Quote,")
	# output.append("\tsource::Source::*,")
	output.append("};")
	output.append("")
	output.append(f"pub const QUOTES: &[Quote] = &[")

	quote: None | Quote = None
	for line in lines:
		if line.startswith("//"):
			if quote is not None:
				output.extend(quote.to_lines())
				quote = None
			output.append('\t' + line)
		elif line == "":
			if quote is not None:
				output.extend(quote.to_lines())
				quote = None
			# if not ((i > 0 and lines[i-1].startswith("\t//")) and (i < len(lines)-1 and lines[i+1].startswith("\tQuote {"))):
			output.append("")
		else:
			if quote is None:
				quote = Quote(text=line, char="", src=None, whom_about=None, whom_to=None)
			elif quote.char == "":
				quote.char = name_to_identifier(line)
			elif quote.char != "" and quote.src is None:
				quote.src = line
			elif line.startswith("whom_about: "):
				whom_about = line[12:]
				quote.whom_about = name_to_identifier(whom_about)
			elif line.startswith("whom_to: "):
				whom_to = line[9:]
				quote.whom_to = name_to_identifier(whom_to)
			else:
				print(quote)
				print(line)
				raise Exception("this should be unrechable!")

	if quote is not None:
		output.extend(quote.to_lines())
		quote = None

	output.append("];")

	# file_output_lines = '\n'.join(output[12:]) + '\n'
	# file_output_lines = (
	# 	"".join(file_output_lines)
	# 		.replace("\n\n\n", "uvqknj") # totally random tmp string
	# 		.replace("\n\n", "\n")
	# 		.replace("uvqknj", "\n\n")
	# ).splitlines()
	# file_output_lines = output[:12] + file_output_lines

	# new_output = []
	# for i, line in enumerate(output):
	# 	if not ((i > 0 and output[i-1].startswith("\t//")) and (i < len(output)-1 and output[i+1].startswith("\tQuote {"))):
	# 		new_output.append(output[i])
	# output = new_output

	output = '\n'.join(output) + '\n'

	output = output.replace("},\n\n\tQuote {", "},\n\tQuote {")

	with open("./src/quotes.rs", 'w') as file_output:
		file_output.write(output)



@dataclass
class Quote:
	text: str
	char: str
	src: None | str
	whom_about: None | str
	whom_to: None | str

	def to_lines(self) -> list[str]:
		lines = [
			"\tQuote {",
			f"\t\ttext: \"{self.text}\",",
			f"\t\tchar: {self.char},",
		]
		if self.src is not None:
			# type_, src_name = self.src.split(maxsplit=1)
			# type_ = type_[1].upper() + type_[2:]
			# src_name = name_to_identifier(src_name)
			lines.append(f"\t\tsrc: Some(\"{self.src}\"),")
		if self.whom_about is not None:
			whom_about = name_to_identifier(self.whom_about)
			lines.append(f"\t\twhom_about: Some({whom_about}),")
		if self.whom_to is not None:
			whom_to = name_to_identifier(self.whom_to)
			lines.append(f"\t\twhom_to: Some({whom_to}),")
		if self.src is None or self.whom_about is None or self.whom_to is None:
			lines.append("\t\t..Quote::default()")
		lines.append("\t},")
		return lines



if __name__ == "__main__":
	main()
