# generate rust quotes file

from dataclasses import dataclass
from pprint import pprint

from generate_lib import *

def main():
	with open("./data/quotes.txt", 'r') as file_input:
		file_input_lines = file_input.readlines()

	lines = list(map(str.strip, file_input_lines))
	output = []

	output.append("//! ALL Touhou quotes.")
	output.append("")
	output.append("// DO NOT EDIT THIS FILE BY HANDS!")
	output.append("// INSTEAD EDIT CORRESPONDING FILE!")
	output.append("")
	output.append("use crate::{")
	output.append("\tcharacters::Character::*,")
	output.append("\tquote::Quote,")
	output.append("};")
	output.append("")
	output.append("pub const QUOTES: &[Quote] = &[")

	quote: None | Quote = None
	for line in lines:
		if line.startswith("//"):
			if quote is not None:
				output.extend(quote.to_lines())
				quote = None
			output.append('\t' + line)
		elif line == "":
			if quote is not None:
				output.extend(quote.to_lines())
				quote = None
			output.append("")
		else:
			if quote is None:
				quote = Quote(text=line, char="", src="", whom_to=None, whom_about=None)
			elif quote.char == "":
				quote.char = name_to_identifier(line)
			elif quote.char != "" and quote.src == "":
				quote.src = line
			elif line.startswith("whom_to: "):
				whom_to = line[9:]
				quote.whom_to = name_to_identifier(whom_to)
			elif line.startswith("whom_about: "):
				whom_about = line[12:]
				quote.whom_about = name_to_identifier(whom_about)
			else:
				print(quote)
				print(line)
				raise Exception("this should be unrechable!")

	if quote is not None:
		output.extend(quote.to_lines())
		quote = None

	output.append("];")

	output = '\n'.join(output) + '\n'

	output = output.replace("},\n\n\tQuote {", "},\n\tQuote {")

	with open("./src/quotes.rs", 'w') as file_output:
		file_output.write(output)



@dataclass
class Quote:
	text: str
	char: str
	src: str
	whom_to: None | str
	whom_about: None | str

	def to_lines(self) -> list[str]:
		assert self.is_ok()
		lines = [
			"\tQuote {",
			f"\t\ttext: \"{self.text}\",",
			f"\t\tchar: {self.char},",
			f"\t\tsrc: \"{self.src}\",",
		]
		if self.whom_to is not None:
			whom_to = name_to_identifier(self.whom_to)
			lines.append(f"\t\twhom_to: Some({whom_to}),")
		if self.whom_about is not None:
			whom_about = name_to_identifier(self.whom_about)
			lines.append(f"\t\twhom_about: Some({whom_about}),")
		if self.whom_about is None or self.whom_to is None:
			lines.append("\t\t..Quote::default()")
		lines.append("\t},")
		return lines

	def is_ok(self) -> bool:
		unwanted = ["text:", "char:", "src:", "whom_to", "whom_about", "\n", "\t"]
		for field, value in vars(self).items():
			if value is not None:
				if any(map(lambda unwanted: unwanted in value, unwanted)):
					pprint(self)
					return False
		return True



if __name__ == "__main__":
	main()
