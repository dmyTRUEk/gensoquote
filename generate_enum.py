# generates rust enum file

import os
import sys

from generate_lib import *

def main():
	filepath_input = sys.argv[1]

	enum_name_lowercase, enum_name_camelcase, filepath_output = parse_filepath_input(filepath_input)

	with open(filepath_input, 'r') as file_input:
		file_input_lines = file_input.readlines()

	lines = map(str.strip, file_input_lines)
	output = []
	src = next(lines)
	assert src.startswith("src: "), f"first line must contain `src: ...`, but it is: `{src}`"
	assert next(lines) == "", "second line mustn't contain any information"
	output.append(f"//! Enum of all official Touhou {enum_name_lowercase}.")
	output.append( "//!")
	output.append(f"//! {src}")
	output.append("")
	output.append("// DO NOT EDIT THIS FILE BY HANDS!")
	output.append("// INSTEAD EDIT CORRESPONDING FILE!")
	output.append("")
	output.append("use crate::to_str::ToStr;")
	output.append("")
	output.append("#[allow(non_camel_case_types, dead_code)]")
	output.append(f"pub enum {enum_name_camelcase} {{")
	for line in lines:
		if line.startswith("//"):
			output.append('\t' + line)
			continue
		elif line == "":
			output.append("")
			continue
		name = line
		ident = name_to_identifier(name)
		output.append('\t' + ident + ',')
	output.append(f"}}")
	output.append("")
	output.append(f"impl ToStr for {enum_name_camelcase} {{")
	output.append("\tfn to_str(&self) -> &str {")
	output.append("\t\tmatch self {")
	lines = map(str.strip, file_input_lines)
	next(lines); next(lines)
	for line in lines:
		if line.startswith("//"):
			output.append('\t'*3 + line)
			continue
		elif line == "":
			output.append("")
			continue
		name = line
		ident = name_to_identifier(name)
		output.append('\t'*3 + f'Self::{ident} => "{name}",')
	output.append("\t\t}")
	output.append("\t}")
	output.append(f"}}")

	with open(filepath_output, 'w') as file_output:
		file_output.write('\n'.join(output) + '\n')



def parse_filepath_input(filepath_input: str) -> tuple[str, str, str]:
	filename_input = os.path.basename(filepath_input)
	assert filename_input.endswith(".txt"), "input file name must end with `.txt`"
	enum_name_lowercase = filename_input[:-4]
	assert enum_name_lowercase.endswith('s'), f"`enum_name_lowercase` should end with `s`, but it is: `{enum_name_lowercase}`"
	enum_name_camelcase = enum_name_lowercase[0].upper() + enum_name_lowercase[1:-1]
	filepath_output = "src/" + enum_name_lowercase + ".rs"
	return enum_name_lowercase, enum_name_camelcase, filepath_output



if __name__ == "__main__":
	main()
